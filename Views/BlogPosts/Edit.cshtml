@using Blog.Enums;
@using Blog.Services.Interfaces;
@model Blog.Models.BlogPost


@inject IImageService _ImageService
@inject IBlogService _BlogPostService

@{
  ViewData["Title"] = "Edit";
}
<main class="container mt-5">
  <form asp-action="Edit" enctype="multipart/form-data" method="post">
    <input type="hidden" asp-for="ImageData"/>
    <input type="hidden" asp-for="ImageType"/>
    <input type="hidden" asp-for="Id"/>
    <input type="hidden" asp-for="CreatedDate"/>
    <input type="hidden" asp-for="UpdatedDate"/>

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row">
      <div class="col-12 col-lg-4">
        <div class="form-group">
          <label asp-for="Title" class="control-label"></label>
          <input asp-for="Title" class="form-control"/>
          <span asp-validation-for="Title" class="text-danger"></span>
        </div>
        <div class="form-group">
          <label asp-for="Abstract" class="control-label"></label>
          <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
          <span asp-validation-for="Abstract" class="text-danger"></span>
        </div>
        <div class="form-group">
          <label asp-for="CategoryId" class="control-label">Category</label>
          <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
        </div>
        <div class="form-group">
          <label asp-for="ImageFile" class="control-label">Blog Post Image</label>
          <img class="img-fluid border rounded-3 m-2" style="max-height: 250px;"
               src="@_ImageService.ConvertByteArrayToFile(Model.ImageData, Model.ImageType, (int)DefaultImage.BlogPostImage)" id="blogImage">
          <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                 onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])"/>
        </div>
      </div>
      <div class="col-12 col-lg-8">
        <div class="form-group">
          <label asp-for="Content" class="control-label"></label>
          <textarea asp-for="Content" class="editor form-control"></textarea>
          <span asp-validation-for="Content" class="text-danger"></span>
        </div>
        <div class="form-group" id="tagContainer">
          <label asp-for="Tags"></label>
          <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" value="@ViewBag.Tags"/>
          <div class="tagcloud axil-single-widget mt-2">

            @foreach (var tag in await _BlogPostService.GetTagsAsync())
            {
              <a onclick="addTag(this)">@tag.Name</a>
            }

          </div>
        </div>
      </div>
    </div>
    <div class="form-group d-flex justify-content-end">
      <label class="form-check-label me-4 mt-2" asp-for="IsPublished">Publish?</label>
      <input class="largerCheckbox me-8" type="checkbox" asp-for="IsPublished"/>
      <span asp-validation-for="IsPublished" class="text-danger"></span>
    </div>
    <div class="form-group d-flex justify-content-end">
      <label class="form-check-label me-4 mt-2" asp-for="IsDeleted">Delete?</label>
      <input class="largerCheckbox me-8" type="checkbox" asp-for="IsDeleted"/>
      <span asp-validation-for="IsDeleted" class="text-danger"></span>
    </div>
    <div class="form-group d-flex justify-content-end">
      <input type="submit" value="Update" class="btn btn-primary"/>
    </div>
  </form>


  <div class="mt-5">
    <a asp-action="Index">Back to List</a>
  </div>
</main>

@section Scripts {
  @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
  }

  <!--CK Editor-->
  <script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>

  <script>
        ClassicEditor
            .create(document.querySelector('.editor'), {
                licenseKey: '',
            })
            .then(editor => {
                window.editor = editor;
            });
    </script>

  <script>
        function addTag(tagElement) {
            let input = document.getElementById('tagInput');

            if (tagElement.classList.contains('disabledTag')) {
                input.focus();
                return;
            }

            let tagName = tagElement.textContent + ', ';

            let currentTags = input.value.split(',');

            // ["tag1", "tag2", "ta"]
            currentTags.pop(); //["tag1", "tag2"]
            currentTags.push(tagName); // ["tag1", "tag2", "tag3", "]

            input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());
            // input.value = "tag1", "tag2", "tag3"

            //[1, 2, 3, 4].reduce( (sum, number) { return sum + number } ); ^^^^^

            input.focus();

            $('.tagcloud > a').show();
            tagElement.classList.add('disabledTag');
        }
    </script>

  <script>
        // override the jQuery ":contains" selector to make it case insensitive
        jQuery.expr[':'].contains = function (a, i, m) {
            return $(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
        };

        $(document).ready(function () {

            $('#tagInput').focus(function () {
                $('.tagcloud').show(300);
            });

            $('form *:not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            })

            $('#tagInput').keyup(function () {

                $('.disabledTag').each(function () {
                    $(this).removeClass('disabledTag');
                })

                // get the text they're searching with
                let inputText = $('#tagInput').val(); // inputText = 'Crucible, Rubber Du'
                let inputTags = inputText.split(',');
                let searchString = inputTags.pop().trim();

                // hide all the tags that dont contain that text
                $('.tagcloud > a:contains(' + searchString + ')').show();
                $('.tagcloud > a:not( :contains(' + searchString + ') )').hide();

                // toggle the disabledTag class based on the current input
                inputTags.forEach(tag => {
                    if (tag.trim() == '') return;

                    let tagElement = $('.tagcloud > a:contains(' + tag.trim() + ')');

                    if (tagElement.text().trim().toLowerCase() == tag.trim().toLowerCase()) {
                        tagElement.addClass('disabledTag');

                    }

                });
            });

        });
    </script>
}